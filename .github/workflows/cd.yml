name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Plan
        env:
          TF_VAR_aws_region: "eu-west-2"
          TF_VAR_aws_account_id: "475641479654"
          TF_VAR_project_name: "ecs-url-shortener"
          TF_VAR_environment: "dev"
          TF_VAR_vpc_cidr: "10.0.0.0/16"
          TF_VAR_availability_zones: '["eu-west-2a", "eu-west-2b"]'
          TF_VAR_private_subnet_cidrs: '["10.0.1.0/24", "10.0.2.0/24"]'
          TF_VAR_public_subnet_cidrs: '["10.0.101.0/24", "10.0.102.0/24"]'
          TF_VAR_container_port: "8080"
          TF_VAR_health_check_path: "/healthz"
          TF_VAR_github_repo: "Aislam00/ecs-url-shortener"
          TF_VAR_domain_name: "iasolutions.co.uk"
          TF_VAR_subdomain: "url"
          TF_VAR_tags: '{"Project":"ecs-url-shortener","Environment":"dev","ManagedBy":"terraform","Owner":"AlaminIslam","CostCenter":"learning"}'
        run: |
          cd terraform/envs/dev
          terraform init
          terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        env:
          TF_VAR_aws_region: "eu-west-2"
          TF_VAR_aws_account_id: "475641479654"
          TF_VAR_project_name: "ecs-url-shortener"
          TF_VAR_environment: "dev"
          TF_VAR_vpc_cidr: "10.0.0.0/16"
          TF_VAR_availability_zones: '["eu-west-2a", "eu-west-2b"]'
          TF_VAR_private_subnet_cidrs: '["10.0.1.0/24", "10.0.2.0/24"]'
          TF_VAR_public_subnet_cidrs: '["10.0.101.0/24", "10.0.102.0/24"]'
          TF_VAR_container_port: "8080"
          TF_VAR_health_check_path: "/healthz"
          TF_VAR_github_repo: "Aislam00/ecs-url-shortener"
          TF_VAR_domain_name: "iasolutions.co.uk"
          TF_VAR_subdomain: "url"
          TF_VAR_tags: '{"Project":"ecs-url-shortener","Environment":"dev","ManagedBy":"terraform","Owner":"AlaminIslam","CostCenter":"learning"}'
        run: |
          cd terraform/envs/dev
          terraform apply -auto-approve

      - name: Wait for infrastructure to be ready
        run: |
          echo "Waiting 30 seconds for infrastructure to stabilize..."
          sleep 30

      - name: Create deployment package and deploy
        if: github.ref == 'refs/heads/main'
        run: |
          # Get deployment bucket name from Terraform output
          cd terraform/envs/dev
          DEPLOYMENT_BUCKET=$(terraform output -raw deployment_bucket_name)
          cd ../../..
          
          CURRENT_TASK_DEF=$(aws ecs describe-services --cluster ecs-url-shortener-dev --services ecs-url-shortener-dev --region eu-west-2 --query 'services[0].taskDefinition' --output text)
          
          aws ecs describe-task-definition --task-definition $CURRENT_TASK_DEF --region eu-west-2 --query 'taskDefinition' > task-def.json
          
          jq --arg IMAGE "475641479654.dkr.ecr.eu-west-2.amazonaws.com/ecs-url-shortener-dev:${{ github.sha }}" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' task-def.json > new-task-def.json
          
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --region eu-west-2 --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "New task definition: $NEW_TASK_DEF_ARN"
          
          mkdir deployment-package
          cat > deployment-package/appspec.yml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "$NEW_TASK_DEF_ARN"
                  LoadBalancerInfo:
                    ContainerName: "app"
                    ContainerPort: 8080
          EOF
          
          cd deployment-package && zip -r ../deployment.zip . && cd ..
          
          aws s3 cp deployment.zip s3://$DEPLOYMENT_BUCKET/deployments/deployment-${{ github.sha }}.zip
          
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ecs-url-shortener-dev \
            --deployment-group-name ecs-url-shortener-dev-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=$DEPLOYMENT_BUCKET,key=deployments/deployment-${{ github.sha }}.zip,bundleType=zip}" \
            --region eu-west-2 \
            --query 'deploymentId' --output text)
          
          echo "CodeDeploy deployment started: $DEPLOYMENT_ID"
          echo "Monitor at: https://eu-west-2.console.aws.amazon.com/codesuite/codedeploy/deployments/$DEPLOYMENT_ID"
          echo "Service URL: https://url.iasolutions.co.uk/healthz"